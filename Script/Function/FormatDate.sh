FormatDate()	{
	#----------------------------------------------------------------------
	#	Get, and optionally format, a date <Day> days from now.
	#----------------------------------------------------------------------
	Me="FormatDate"
	Day=${1:?"${Me}: Error, please specify a time interval in days."}
	Format=${2}

	#----------------------------------------------------------------------
	#	Local variables.
	#----------------------------------------------------------------------
	Uname="`uname`"	# OS name

	#----------------------------------------------------------------------
	#	Some platforms expect support for 'yesterday', today
	#	and 'tomorrow'.
	#----------------------------------------------------------------------
	if [ "${Day}" = "yesterday" ]
	then
		Day="-1"

	elif [ "${Day}" = "today" ]
	then
		Day="+0"

	elif [ "${Day}" = "tomorrow" ]
	then
		Day="+1"
	fi

	#----------------------------------------------------------------------
	#	Ensure we have a leading plus sign on positive values.
	#----------------------------------------------------------------------
	FirstChar="${Day:0:1}"

	if [ \( "${FirstChar}" != "+" \)  -a \( "${FirstChar}" != "-" \) ]
	then
		Day="+${Day}"
	fi

	#----------------------------------------------------------------------
	#	Use OS specific versions of the "date" command.
	#----------------------------------------------------------------------
	if [ "${Uname}" != "Darwin" ]
	then
		#--------------------------------------------------------------
		#	Linux.
		#--------------------------------------------------------------
		Command="date --date='${Day} days' ${Format}"
	else
		#--------------------------------------------------------------
		#	Mac OS.
		#--------------------------------------------------------------
		Command="date -v ${Day}d ${Format}"
	fi

	#----------------------------------------------------------------------
	#	Run the OS specific command.
	#----------------------------------------------------------------------
	eval $Command
}
